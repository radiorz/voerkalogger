/* tslint:disable */
/* eslint-disable */
/**
 * server - version 1
 *
 *
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export type Example = {
  /**
   * [required]
   */
  id: number;
  /**
   * [required]
   */
  email: string;
  /**
   * [required]
   */
  name: string;
  status?: 'Happy' | 'Sad';
  /**
   * [required]
   */
  phoneNumbers: string[];
};
export type Pick_example_email_or_name_or_phonenumbers_ = {
  /**
   * [required]
   */
  email: string;
  /**
   * [required]
   */
  name: string;
  /**
   * [required]
   */
  phoneNumbers: string[];
};
export type ExampleCreationParams = unknown;
export type UserCreateOptions = {
  /**
   * [required]
   */
  email: string;
  /**
   * [required]
   */
  title: string;
  /**
   * [required]
   */
  password: string;
  /**
   * [required]
   */
  avatar: string;
  /**
   * [required]
   */
  deleted: boolean;
  /**
   * [required]
   */
  disabled: boolean;
  /**
   * [required]
   */
  appId: string;
  /**
   * [required]
   */
  role: string;
  /**
   * [required]
   */
  orgId: number;
};
export type UserView = {
  /**
   * [required]
   */
  email: string;
  /**
   * [required]
   */
  createdAt: string;
  /**
   * [required]
   */
  updatedAt: string;
  /**
   * [required]
   */
  id: string;
  /**
   * [required]
   */
  title: string;
  /**
   * [required]
   */
  avatar: string;
  /**
   * [required]
   */
  deleted: boolean;
  /**
   * [required]
   */
  disabled: boolean;
  /**
   * [required]
   */
  appId: string;
  /**
   * [required]
   */
  role: string;
  /**
   * [required]
   */
  orgId: number;
};
export type UserUpdateOptions = {
  email?: string;
  title?: string;
  password?: string;
  avatar?: string;
  deleted?: boolean;
  disabled?: boolean;
  appId?: string;
  role?: string;
  orgId?: number;
};
export type ContactCreateArgs = {
  /**
   * [required]
   */
  tags: string[];
  /**
   * [required]
   */
  remark: string;
};
export type ContactUpdateArgs = {
  /**
   * [required]
   */
  tags: string[];
  /**
   * [required]
   */
  remark: string;
};
export type CallCreateOptions = {
  /**
   * [required]
   */
  from: string;
  /**
   * [required]
   */
  fromName: string;
  /**
   * [required]
   */
  fromAvatar: string;
  /**
   * [required]
   */
  to: string;
  /**
   * [required]
   */
  toName: string;
  /**
   * [required]
   */
  toAvatar: string;
  /**
   * [required]
   */
  status: string;
  connected?: boolean;
  /**
   * [required]
   */
  startedAt: string;
  endedAt?: string;
  duration?: number;
};
export type CallUpdateOptions = {
  from?: string;
  fromName?: string;
  fromAvatar?: string;
  to?: string;
  toName?: string;
  toAvatar?: string;
  status?: string;
  connected?: boolean;
  startedAt?: string;
  endedAt?: string;
  duration?: number;
};
declare global {
  interface Apis {
    general: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /example/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   name?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: number
       *   // [required]
       *   email: string
       *   // [required]
       *   name: string
       *   status?: 'Happy' | 'Sad'
       *   // [required]
       *   phoneNumbers: string[]
       * }
       * ```
       */
      GetExample<
        Config extends Alova2MethodConfig<Example> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
          params: {
            name?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Example, 'general.GetExample', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /example
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = unknown
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      CreateExample<
        Config extends Alova2MethodConfig<unknown> & {
          data: ExampleCreationParams;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'general.CreateExample', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /example/uploadFile
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   title: string
       *   // [required]
       *   description: string
       *   // [required]
       *   files: Blob[]
       *   // [required]
       *   file: Blob
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      UploadFile<
        Config extends Alova2MethodConfig<unknown> & {
          data: {
            /**
             * [required]
             */
            title: string;
            /**
             * [required]
             */
            description: string;
            /**
             * [required]
             */
            files: Blob[];
            /**
             * [required]
             */
            file: Blob;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'general.UploadFile', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /users
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   email: string
       *   // [required]
       *   title: string
       *   // [required]
       *   password: string
       *   // [required]
       *   avatar: string
       *   // [required]
       *   deleted: boolean
       *   // [required]
       *   disabled: boolean
       *   // [required]
       *   appId: string
       *   // [required]
       *   role: string
       *   // [required]
       *   orgId: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   orgId: number
       *   // [required]
       *   role: string
       *   // [required]
       *   appId: string
       *   // [required]
       *   disabled: boolean
       *   // [required]
       *   deleted: boolean
       *   // [required]
       *   avatar: string
       *   // [required]
       *   email: string
       *   // [required]
       *   password: string
       *   // [required]
       *   title: string
       *   // [required]
       *   id: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   createdAt: string
       * }
       * ```
       */
      Create<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          orgId: number;
          /**
           * [required]
           */
          role: string;
          /**
           * [required]
           */
          appId: string;
          /**
           * [required]
           */
          disabled: boolean;
          /**
           * [required]
           */
          deleted: boolean;
          /**
           * [required]
           */
          avatar: string;
          /**
           * [required]
           */
          email: string;
          /**
           * [required]
           */
          password: string;
          /**
           * [required]
           */
          title: string;
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
        }> & {
          data: UserCreateOptions;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          orgId: number;
          /**
           * [required]
           */
          role: string;
          /**
           * [required]
           */
          appId: string;
          /**
           * [required]
           */
          disabled: boolean;
          /**
           * [required]
           */
          deleted: boolean;
          /**
           * [required]
           */
          avatar: string;
          /**
           * [required]
           */
          email: string;
          /**
           * [required]
           */
          password: string;
          /**
           * [required]
           */
          title: string;
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
        },
        'general.Create',
        Config
      >;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /users
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   // [required]
       *   email: string
       *   // [required]
       *   createdAt: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   id: string
       *   // [required]
       *   title: string
       *   // [required]
       *   avatar: string
       *   // [required]
       *   deleted: boolean
       *   // [required]
       *   disabled: boolean
       *   // [required]
       *   appId: string
       *   // [required]
       *   role: string
       *   // [required]
       *   orgId: number
       * }>
       * ```
       */
      FindMany<Config extends Alova2MethodConfig<UserView[]>>(
        config?: Config
      ): Alova2Method<UserView[], 'general.FindMany', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /users/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   email: string
       *   // [required]
       *   createdAt: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   id: string
       *   // [required]
       *   title: string
       *   // [required]
       *   avatar: string
       *   // [required]
       *   deleted: boolean
       *   // [required]
       *   disabled: boolean
       *   // [required]
       *   appId: string
       *   // [required]
       *   role: string
       *   // [required]
       *   orgId: number
       * }
       * ```
       */
      Find<
        Config extends Alova2MethodConfig<UserView> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<UserView, 'general.Find', Config>;
      /**
       * ---
       *
       * [PATCH]
       *
       * **path:** /users/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   email?: string
       *   title?: string
       *   password?: string
       *   avatar?: string
       *   deleted?: boolean
       *   disabled?: boolean
       *   appId?: string
       *   role?: string
       *   orgId?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   orgId: number
       *   // [required]
       *   role: string
       *   // [required]
       *   appId: string
       *   // [required]
       *   disabled: boolean
       *   // [required]
       *   deleted: boolean
       *   // [required]
       *   avatar: string
       *   // [required]
       *   email: string
       *   // [required]
       *   password: string
       *   // [required]
       *   title: string
       *   // [required]
       *   id: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   createdAt: string
       * }
       * ```
       */
      Update<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          orgId: number;
          /**
           * [required]
           */
          role: string;
          /**
           * [required]
           */
          appId: string;
          /**
           * [required]
           */
          disabled: boolean;
          /**
           * [required]
           */
          deleted: boolean;
          /**
           * [required]
           */
          avatar: string;
          /**
           * [required]
           */
          email: string;
          /**
           * [required]
           */
          password: string;
          /**
           * [required]
           */
          title: string;
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
        }> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: UserUpdateOptions;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          orgId: number;
          /**
           * [required]
           */
          role: string;
          /**
           * [required]
           */
          appId: string;
          /**
           * [required]
           */
          disabled: boolean;
          /**
           * [required]
           */
          deleted: boolean;
          /**
           * [required]
           */
          avatar: string;
          /**
           * [required]
           */
          email: string;
          /**
           * [required]
           */
          password: string;
          /**
           * [required]
           */
          title: string;
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
        },
        'general.Update',
        Config
      >;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /users/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   orgId: number
       *   // [required]
       *   role: string
       *   // [required]
       *   appId: string
       *   // [required]
       *   disabled: boolean
       *   // [required]
       *   deleted: boolean
       *   // [required]
       *   avatar: string
       *   // [required]
       *   email: string
       *   // [required]
       *   password: string
       *   // [required]
       *   title: string
       *   // [required]
       *   id: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   createdAt: string
       * }
       * ```
       */
      Delete<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          orgId: number;
          /**
           * [required]
           */
          role: string;
          /**
           * [required]
           */
          appId: string;
          /**
           * [required]
           */
          disabled: boolean;
          /**
           * [required]
           */
          deleted: boolean;
          /**
           * [required]
           */
          avatar: string;
          /**
           * [required]
           */
          email: string;
          /**
           * [required]
           */
          password: string;
          /**
           * [required]
           */
          title: string;
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
        }> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          orgId: number;
          /**
           * [required]
           */
          role: string;
          /**
           * [required]
           */
          appId: string;
          /**
           * [required]
           */
          disabled: boolean;
          /**
           * [required]
           */
          deleted: boolean;
          /**
           * [required]
           */
          avatar: string;
          /**
           * [required]
           */
          email: string;
          /**
           * [required]
           */
          password: string;
          /**
           * [required]
           */
          title: string;
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
        },
        'general.Delete',
        Config
      >;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /contacts/{ownerId}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   ownerId: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown[]
       * ```
       */
      FindMany<
        Config extends Alova2MethodConfig<unknown[]> & {
          pathParams: {
            /**
             * [required]
             */
            ownerId: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown[], 'general.FindMany', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /contacts
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   // [required]
       *   orgId: number
       *   // [required]
       *   role: string
       *   // [required]
       *   appId: string
       *   // [required]
       *   disabled: boolean
       *   // [required]
       *   deleted: boolean
       *   // [required]
       *   avatar: string
       *   // [required]
       *   email: string
       *   // [required]
       *   title: string
       *   // [required]
       *   id: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   createdAt: string
       * }>
       * ```
       */
      FindAll<
        Config extends Alova2MethodConfig<
          Array<{
            /**
             * [required]
             */
            orgId: number;
            /**
             * [required]
             */
            role: string;
            /**
             * [required]
             */
            appId: string;
            /**
             * [required]
             */
            disabled: boolean;
            /**
             * [required]
             */
            deleted: boolean;
            /**
             * [required]
             */
            avatar: string;
            /**
             * [required]
             */
            email: string;
            /**
             * [required]
             */
            title: string;
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            updatedAt: string;
            /**
             * [required]
             */
            createdAt: string;
          }>
        >
      >(
        config?: Config
      ): Alova2Method<
        Array<{
          /**
           * [required]
           */
          orgId: number;
          /**
           * [required]
           */
          role: string;
          /**
           * [required]
           */
          appId: string;
          /**
           * [required]
           */
          disabled: boolean;
          /**
           * [required]
           */
          deleted: boolean;
          /**
           * [required]
           */
          avatar: string;
          /**
           * [required]
           */
          email: string;
          /**
           * [required]
           */
          title: string;
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
        }>,
        'general.FindAll',
        Config
      >;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /contacts
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   tags: string[]
       *   // [required]
       *   remark: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   remark: string
       *   // [required]
       *   tags: string
       *   // [required]
       *   targetId: string
       *   // [required]
       *   ownerId: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   createdAt: string
       * }
       * ```
       */
      Create<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          remark: string;
          /**
           * [required]
           */
          tags: string;
          /**
           * [required]
           */
          targetId: string;
          /**
           * [required]
           */
          ownerId: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
        }> & {
          data: ContactCreateArgs;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          remark: string;
          /**
           * [required]
           */
          tags: string;
          /**
           * [required]
           */
          targetId: string;
          /**
           * [required]
           */
          ownerId: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
        },
        'general.Create',
        Config
      >;
      /**
       * ---
       *
       * [PATCH]
       *
       * **path:** /contacts/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   tags: string[]
       *   // [required]
       *   remark: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   remark: string
       *   // [required]
       *   tags: string
       *   // [required]
       *   targetId: string
       *   // [required]
       *   ownerId: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   createdAt: string
       * }
       * ```
       */
      Update<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          remark: string;
          /**
           * [required]
           */
          tags: string;
          /**
           * [required]
           */
          targetId: string;
          /**
           * [required]
           */
          ownerId: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
        }> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: ContactUpdateArgs;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          remark: string;
          /**
           * [required]
           */
          tags: string;
          /**
           * [required]
           */
          targetId: string;
          /**
           * [required]
           */
          ownerId: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
        },
        'general.Update',
        Config
      >;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /contacts/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   remark: string
       *   // [required]
       *   tags: string
       *   // [required]
       *   targetId: string
       *   // [required]
       *   ownerId: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   createdAt: string
       * }
       * ```
       */
      Delete<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          remark: string;
          /**
           * [required]
           */
          tags: string;
          /**
           * [required]
           */
          targetId: string;
          /**
           * [required]
           */
          ownerId: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
        }> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          remark: string;
          /**
           * [required]
           */
          tags: string;
          /**
           * [required]
           */
          targetId: string;
          /**
           * [required]
           */
          ownerId: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
        },
        'general.Delete',
        Config
      >;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /calls
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [required]
       *   from: string
       *   // [required]
       *   fromName: string
       *   // [required]
       *   fromAvatar: string
       *   // [required]
       *   to: string
       *   // [required]
       *   toName: string
       *   // [required]
       *   toAvatar: string
       *   // [required]
       *   status: string
       *   connected?: boolean
       *   // [required]
       *   startedAt: string
       *   endedAt?: string
       *   duration?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   duration: number
       *   // [required]
       *   endedAt: string
       *   // [required]
       *   startedAt: string
       *   // [required]
       *   connected: boolean
       *   // [required]
       *   status: string
       *   // [required]
       *   toAvatar: string
       *   // [required]
       *   toName: string
       *   // [required]
       *   to: string
       *   // [required]
       *   fromAvatar: string
       *   // [required]
       *   fromName: string
       *   // [required]
       *   from: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   createdAt: string
       *   // [required]
       *   id: number
       * }
       * ```
       */
      Create<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          duration: number;
          /**
           * [required]
           */
          endedAt: string;
          /**
           * [required]
           */
          startedAt: string;
          /**
           * [required]
           */
          connected: boolean;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          toAvatar: string;
          /**
           * [required]
           */
          toName: string;
          /**
           * [required]
           */
          to: string;
          /**
           * [required]
           */
          fromAvatar: string;
          /**
           * [required]
           */
          fromName: string;
          /**
           * [required]
           */
          from: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
          /**
           * [required]
           */
          id: number;
        }> & {
          data: CallCreateOptions;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          duration: number;
          /**
           * [required]
           */
          endedAt: string;
          /**
           * [required]
           */
          startedAt: string;
          /**
           * [required]
           */
          connected: boolean;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          toAvatar: string;
          /**
           * [required]
           */
          toName: string;
          /**
           * [required]
           */
          to: string;
          /**
           * [required]
           */
          fromAvatar: string;
          /**
           * [required]
           */
          fromName: string;
          /**
           * [required]
           */
          from: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
          /**
           * [required]
           */
          id: number;
        },
        'general.Create',
        Config
      >;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /calls
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   // [required]
       *   duration: number
       *   // [required]
       *   endedAt: string
       *   // [required]
       *   startedAt: string
       *   // [required]
       *   connected: boolean
       *   // [required]
       *   status: string
       *   // [required]
       *   toAvatar: string
       *   // [required]
       *   toName: string
       *   // [required]
       *   to: string
       *   // [required]
       *   fromAvatar: string
       *   // [required]
       *   fromName: string
       *   // [required]
       *   from: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   createdAt: string
       *   // [required]
       *   id: number
       * }>
       * ```
       */
      FindMany<
        Config extends Alova2MethodConfig<
          Array<{
            /**
             * [required]
             */
            duration: number;
            /**
             * [required]
             */
            endedAt: string;
            /**
             * [required]
             */
            startedAt: string;
            /**
             * [required]
             */
            connected: boolean;
            /**
             * [required]
             */
            status: string;
            /**
             * [required]
             */
            toAvatar: string;
            /**
             * [required]
             */
            toName: string;
            /**
             * [required]
             */
            to: string;
            /**
             * [required]
             */
            fromAvatar: string;
            /**
             * [required]
             */
            fromName: string;
            /**
             * [required]
             */
            from: string;
            /**
             * [required]
             */
            updatedAt: string;
            /**
             * [required]
             */
            createdAt: string;
            /**
             * [required]
             */
            id: number;
          }>
        >
      >(
        config?: Config
      ): Alova2Method<
        Array<{
          /**
           * [required]
           */
          duration: number;
          /**
           * [required]
           */
          endedAt: string;
          /**
           * [required]
           */
          startedAt: string;
          /**
           * [required]
           */
          connected: boolean;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          toAvatar: string;
          /**
           * [required]
           */
          toName: string;
          /**
           * [required]
           */
          to: string;
          /**
           * [required]
           */
          fromAvatar: string;
          /**
           * [required]
           */
          fromName: string;
          /**
           * [required]
           */
          from: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
          /**
           * [required]
           */
          id: number;
        }>,
        'general.FindMany',
        Config
      >;
      /**
       * ---
       *
       * [PATCH]
       *
       * **path:** /calls/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   from?: string
       *   fromName?: string
       *   fromAvatar?: string
       *   to?: string
       *   toName?: string
       *   toAvatar?: string
       *   status?: string
       *   connected?: boolean
       *   startedAt?: string
       *   endedAt?: string
       *   duration?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   duration: number
       *   // [required]
       *   endedAt: string
       *   // [required]
       *   startedAt: string
       *   // [required]
       *   connected: boolean
       *   // [required]
       *   status: string
       *   // [required]
       *   toAvatar: string
       *   // [required]
       *   toName: string
       *   // [required]
       *   to: string
       *   // [required]
       *   fromAvatar: string
       *   // [required]
       *   fromName: string
       *   // [required]
       *   from: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   createdAt: string
       *   // [required]
       *   id: number
       * }
       * ```
       */
      Update<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          duration: number;
          /**
           * [required]
           */
          endedAt: string;
          /**
           * [required]
           */
          startedAt: string;
          /**
           * [required]
           */
          connected: boolean;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          toAvatar: string;
          /**
           * [required]
           */
          toName: string;
          /**
           * [required]
           */
          to: string;
          /**
           * [required]
           */
          fromAvatar: string;
          /**
           * [required]
           */
          fromName: string;
          /**
           * [required]
           */
          from: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
          /**
           * [required]
           */
          id: number;
        }> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
          data: CallUpdateOptions;
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          duration: number;
          /**
           * [required]
           */
          endedAt: string;
          /**
           * [required]
           */
          startedAt: string;
          /**
           * [required]
           */
          connected: boolean;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          toAvatar: string;
          /**
           * [required]
           */
          toName: string;
          /**
           * [required]
           */
          to: string;
          /**
           * [required]
           */
          fromAvatar: string;
          /**
           * [required]
           */
          fromName: string;
          /**
           * [required]
           */
          from: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
          /**
           * [required]
           */
          id: number;
        },
        'general.Update',
        Config
      >;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /calls/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   duration: number
       *   // [required]
       *   endedAt: string
       *   // [required]
       *   startedAt: string
       *   // [required]
       *   connected: boolean
       *   // [required]
       *   status: string
       *   // [required]
       *   toAvatar: string
       *   // [required]
       *   toName: string
       *   // [required]
       *   to: string
       *   // [required]
       *   fromAvatar: string
       *   // [required]
       *   fromName: string
       *   // [required]
       *   from: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   createdAt: string
       *   // [required]
       *   id: number
       * }
       * ```
       */
      Find<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          duration: number;
          /**
           * [required]
           */
          endedAt: string;
          /**
           * [required]
           */
          startedAt: string;
          /**
           * [required]
           */
          connected: boolean;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          toAvatar: string;
          /**
           * [required]
           */
          toName: string;
          /**
           * [required]
           */
          to: string;
          /**
           * [required]
           */
          fromAvatar: string;
          /**
           * [required]
           */
          fromName: string;
          /**
           * [required]
           */
          from: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
          /**
           * [required]
           */
          id: number;
        }> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          duration: number;
          /**
           * [required]
           */
          endedAt: string;
          /**
           * [required]
           */
          startedAt: string;
          /**
           * [required]
           */
          connected: boolean;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          toAvatar: string;
          /**
           * [required]
           */
          toName: string;
          /**
           * [required]
           */
          to: string;
          /**
           * [required]
           */
          fromAvatar: string;
          /**
           * [required]
           */
          fromName: string;
          /**
           * [required]
           */
          from: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
          /**
           * [required]
           */
          id: number;
        },
        'general.Find',
        Config
      >;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /calls/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   duration: number
       *   // [required]
       *   endedAt: string
       *   // [required]
       *   startedAt: string
       *   // [required]
       *   connected: boolean
       *   // [required]
       *   status: string
       *   // [required]
       *   toAvatar: string
       *   // [required]
       *   toName: string
       *   // [required]
       *   to: string
       *   // [required]
       *   fromAvatar: string
       *   // [required]
       *   fromName: string
       *   // [required]
       *   from: string
       *   // [required]
       *   updatedAt: string
       *   // [required]
       *   createdAt: string
       *   // [required]
       *   id: number
       * }
       * ```
       */
      Delete<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          duration: number;
          /**
           * [required]
           */
          endedAt: string;
          /**
           * [required]
           */
          startedAt: string;
          /**
           * [required]
           */
          connected: boolean;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          toAvatar: string;
          /**
           * [required]
           */
          toName: string;
          /**
           * [required]
           */
          to: string;
          /**
           * [required]
           */
          fromAvatar: string;
          /**
           * [required]
           */
          fromName: string;
          /**
           * [required]
           */
          from: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
          /**
           * [required]
           */
          id: number;
        }> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          duration: number;
          /**
           * [required]
           */
          endedAt: string;
          /**
           * [required]
           */
          startedAt: string;
          /**
           * [required]
           */
          connected: boolean;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          toAvatar: string;
          /**
           * [required]
           */
          toName: string;
          /**
           * [required]
           */
          to: string;
          /**
           * [required]
           */
          fromAvatar: string;
          /**
           * [required]
           */
          fromName: string;
          /**
           * [required]
           */
          from: string;
          /**
           * [required]
           */
          updatedAt: string;
          /**
           * [required]
           */
          createdAt: string;
          /**
           * [required]
           */
          id: number;
        },
        'general.Delete',
        Config
      >;
    };
  }

  var Apis: Apis;
}
